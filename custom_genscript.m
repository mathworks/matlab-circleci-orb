function scriptText = custom_genscript(varargin)
    %GENSCRIPT Generate a MATLAB script for running tests.
    
    % Define the script as a single string with newline characters
    scriptText = [...
    "import matlab.unittest.TestRunner;", ...
    newline, ...
    "import matlab.unittest.plugins.XMLPlugin;", ...
    newline, ...
    "import matlab.unittest.TestSuite;", ...
    newline, ... 
    "tempFile = tempname;", ...
    newline, ... 
    "suites = {};", ...
    newline, ... 
    "cd tests", ...
    newline, ...
    "command = 'circleci tests glob ""**/*.m"" | xargs -n1 basename | sed ''s/\.m$//'' | circleci tests split --split-by=timings 2>' + string(tempFile);", ...
    newline, ...
    "[status, stdout] = system(command);", ... 
    newline, ...
    "stderr = fileread(tempFile);", ... 
    newline, ...
    "disp(stderr);", ...
    newline, ... 
    "delete(tempFile);", ...
    newline, ... 
    "stdout = strsplit(stdout, '\n');", ...
    newline, ... 
    "stdout = stdout(~cellfun('isempty', stdout));", ...
    newline, ... 
    "stdout = strtrim(stdout);", ...
    newline, ... 
    "stdoutCellArray = stdout(:)';", ...
    newline, ...
    newline, ...
    "for i = 1:length(stdoutCellArray)", ...
    newline, ... 
    "    testFilePath = fullfile('.', [stdoutCellArray{i}, '.m']);", ...
    newline, ...
    "    suites{end+1} = TestSuite.fromFile(testFilePath);", ...
    newline, ... 
    "end", ... 
    newline, ...
    "suite = [suites{:}];", ...
    newline, ...
    "runner = TestRunner.withTextOutput();", ...
    newline, ... 
    "results = runner.run(suite);", ...
    newline, ...
    "display(results);", ...
    newline, ...
    "assertSuccess(results);"];
    
    % Convert the string array to a single string (if it's not already)
    scriptText = join(scriptText, "");
    
    % Convert to character array if specifically requested to be of char type
    scriptText = char(scriptText);
    
    end
