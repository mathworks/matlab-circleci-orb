version: 2.1
orbs:
  matlab: mathworks/matlab@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.1
  win: circleci/windows@5.0

filters: &filters
  tags:
    only: /.*/

integration-tests: &integration-tests
  [
    orb-tools/pack,
    # integration-test-install,
    # integration-test-install-release,
    # integration-test-run-command,
    integration-test-run-tests
  ]

executors:
  linux: &linux-executor
    machine:
      image: ubuntu-2204:2024.01.1
  macos:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
  windows:
    win/default

jobs:
  integration-test-run-tests:
    parameters:
      executor:
        type: executor
    parallelism: 2
    executor: <<parameters.executor>>
    steps:
    # Setup for Integ tests for matlab/run-tests
      - matlab/install:
          no-output-timeout: 30m
      - run:
          command: |
            echo 'myvar = 123' > startup.m
            mkdir src
            echo 'function c=add(a,b);c=a+b;' > src/add.m
            mkdir tests
            echo "%% StartupTest" > tests/mytest.m
            echo "disp('in tests/mytest.m')" > tests/mytest.m
            echo "evalin('base','assert(myvar==123)')" >> tests/mytest.m
            echo "%% FirstTest" >> tests/mytest.m
            echo "assert(add(1,2)==3)" >> tests/mytest.m
            mkdir tests/filteredTest
            echo "%% simpleTest" >> tests/filteredTest/mytest.m
            echo "disp('In tests/filteredTest/mytest.m')" >> tests/filteredTest/mytest.m
            echo "assert(2==2)" >> tests/filteredTest/mytest.m 
            # printf "%% FilterByTag\n" >> tests/filteredTest/TaggedTest.m
            # printf "classdef (TestTags = {'FILTERED'}) TaggedTest < matlab.unittest.TestCase\n" >> tests/filteredTest/TaggedTest.m
            # printf "methods (Test)\n function testTag (testCase)\n assert(2==2);\n end\n end\n end" >> tests/filteredTest/TaggedTest.m
          shell: bash

      # - run:
      #     name: Run the circleci comamnds
      #     command: |
      #       # Capture test selection into PARAM_SELECT_BY_NAME
      #       PARAM_SELECT_BY_NAME=$(circleci tests glob 'tests/**/*.m' \
      #         | circleci tests split \
      #         | awk -F'[\\/.]' '{print $(NF-1) "/*"}')

      #       echo "=== PARAM_SELECT_BY_NAME ==="
      #       echo "$PARAM_SELECT_BY_NAME"
      #       echo

      #       # Transform into MATLAB cell array format
      #       selectByName=$( echo "$PARAM_SELECT_BY_NAME" | awk '{
      #           for(i=1; i<=NF; i++) {
      #               gsub(/\047/, "\047\047", $i);
      #               printf "\047%s\047%s", $i, (i==NF ? "" : ", ");
      #           }
      #       }')
      #       selectByName="{$selectByName}"

      #       # Generate MATLAB script
      #       {
      #         echo 'import matlab.unittest.TestRunner;'
      #         echo "disp('Int scripter.m file')"
      #         echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
      #         printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
      #         echo "{suite.Name}"
      #       } > scripter.m

      #       cat scripter.m

      # - matlab/run-command:
      #     command: ls, scripter  

      # - run:
      #     name: Run UPDATED the circleci comamnds
      #     command: |
      #       # Capture test selection into PARAM_SELECT_BY_NAME
      #       PARAM_SELECT_BY_NAME=$(circleci tests glob 'tests/**/*.m' \
      #         | circleci tests split)

      #       echo "=== PARAM_SELECT_BY_NAME ==="
      #       echo "$PARAM_SELECT_BY_NAME"
      #       echo

      #       # Transform into MATLAB cell array format
      #       selectByName=$( echo "$PARAM_SELECT_BY_NAME" | awk '{
      #           for(i=1; i<=NF; i++) {
      #               gsub(/\047/, "\047\047", $i);
      #               printf "\047%s\047%s", $i, (i==NF ? "" : ", ");
      #           }
      #       }')
      #       selectByName="{$selectByName}"

      #       # Generate MATLAB script
      #       {
      #         echo 'import matlab.unittest.TestRunner;'
      #         echo "disp('Int scripter.m file')"
      #         echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
      #         echo "disp('Before selectIf on Name')"
      #         echo "{suite.Name}"
      #         printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
      #         echo "disp('After selectIf on Name')"
      #         echo "{suite.Name}"
      #       } > scripter1.m

      #       cat scripter1.m

      # - matlab/run-command:
      #     command: ls, scripter1    

      - matlab/run-tests:
      #     select-by-name: $(circleci tests glob 'tests/**/*.m' | circleci tests split | awk -F'[\\\\/.]' '{print $(NF-1) "/*"}')
          source-folder: src
          test-results-junit: test-results/results.xml
      - store_test_results:
          path: test-results/results.xml
      
      #     startup-options: -logfile console.log
      # - run:
      #     name: Verify tests ran as filtered by name
      #     command: |
      #       set -e
      #       grep mytest console.log
      #       grep TaggedTest console.log
      #       grep filtertest console.log
      #       rm console.log
      #     shell: bash
    # Set up for model coverage artifact tests            



workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      # - integration-test-install:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-install-latest-including-prerelease:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-install-release:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]
      #         release: [R2023bU1]

      # - integration-test-install-with-cache:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-run-command:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      - integration-test-run-tests:
          matrix:
            parameters:
              executor: [linux]

      # - integration-test-run-build:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      - orb-tools/pack:
          filters: *filters

      - orb-tools/publish:
          orb-name: mathworks/matlab
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires: *integration-tests
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
