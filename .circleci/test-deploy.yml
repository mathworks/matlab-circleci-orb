version: 2.1
orbs:
  matlab: mathworks/matlab@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.1
  win: circleci/windows@5.0

filters: &filters
  tags:
    only: /.*/

integration-tests: &integration-tests
  [
    # orb-tools/pack,
    # integration-test-install,
    # integration-test-install-release,
    # integration-test-run-command,
    integration-test-run-tests
  ]

executors:
  linux: &linux-executor
    machine:
      image: ubuntu-2204:2024.01.1
  macos:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
  windows:
    win/default

jobs:
  integration-test-run-tests:
    parameters:
      executor:
        type: executor
    parallelism: 2
    executor: <<parameters.executor>>
    steps:

      - run:
          name: Create JSON metadata file
          command: |
            cat > testresults.json \<<'EOF'
            {
              "file": {
                "tests/basic/mytest.m": 0.350,
                "tests/filteredTest/mytest.m": 0.120,
                "tests/filteredTest/TaggedTest.m": 0.080
              },
              "classname": {
                "mytest": 0.470,
                "TaggedTest": 0.080
              },
              "name": {
                "StartupTest": 0.200,
                "FirstTest": 0.150,
                "simpleTest": 0.120,
                "testTag": 0.080
              }
            }
            EOF 
      - store_test_results:
          path: testresults.json   
    
      - run:
          command: |
            echo 'myvar = 123' > startup.m
            mkdir src
            echo 'function c=add(a,b);c=a+b;' > src/add.m
            mkdir tests
            mkdir tests/basic
            echo "%% StartupTest" > tests/basic/mytest.m
            echo "disp('in tests/basic/mytest.m')" > tests/basic/mytest.m
            echo "evalin('base','assert(myvar==123)')" >> tests/basic/mytest.m
            echo "%% FirstTest" >> tests/basic/mytest.m
            echo "assert(add(1,2)==3)" >> tests/basic/mytest.m
            mkdir tests/filteredTest
            echo "%% simpleTest" >> tests/filteredTest/mytest.m
            echo "disp('In tests/filteredTest/mytest.m')" >> tests/filteredTest/mytest.m
            echo "assert(2==2)" >> tests/filteredTest/mytest.m 
            printf "%% FilterByTag\n" >> tests/filteredTest/TaggedTest.m
            printf "classdef (TestTags = {'FILTERED'}) TaggedTest < matlab.unittest.TestCase\n" >> tests/filteredTest/TaggedTest.m
            printf "methods (Test)\n function testTag (testCase)\n assert(2==2);\n end\n end\n end" >> tests/filteredTest/TaggedTest.m
          shell: bash

      # - run:
      #    command: cd tests && ls && cd filteredTest && ls

      # - run:
      #    command: cat test-results/results.xml
      
      - run:
          name: Run the circleci comamnds for timing
          command: |
           # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m" | awk -F'[\\\\/.]' '{print $(NF-1)}'  )

            echo "=== PARAM_SELECT_BY_NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            
            # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m" | circleci tests split --split-by=timings --timings-type=classname)

            echo "=== PARAM_SELECT_BY_NAME BY NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            # Transform into MATLAB cell array format
            # Transform into MATLAB cell array format
            selectByName=$(echo "$PARAM_SELECT_BY_NAME" | awk '{
                gsub(/\047/, "\047\047", $0);
                printf "%s\047%s\047", (NR==1 ? "" : ", "), $0;
            }')
            selectByName="{$selectByName}"
            
            # Generate MATLAB script
            {
              echo 'import matlab.unittest.TestRunner;'
              echo "disp('Int scripter.m file')"
              echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
              echo "disp('Before SelectIf')"
              echo "{suite.Name}"
              printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
              echo "disp('After SelectIf')"
              echo "{suite.Name}"
            } > scripter1.m

            cat scripter1.m

      - run:
          name: Run the circleci comamnds for size
          command: |
           # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m" | awk -F'[\\\\/.]' '{print $(NF-1)}'  )

            echo "=== PARAM_SELECT_BY_NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            
            # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m"  | circleci tests split --split-by=timings --timings-type=filename )
            

            echo "=== PARAM_SELECT_BY_NAME BY NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            # Transform into MATLAB cell array format
            selectByName=$(echo "$PARAM_SELECT_BY_NAME" | awk '{
                gsub(/\047/, "\047\047", $0);
                printf "%s\047%s\047", (NR==1 ? "" : ", "), $0;
            }')
            selectByName="{$selectByName}"

            # Generate MATLAB script
            {
              echo 'import matlab.unittest.TestRunner;'
              echo "disp('Int scripter.m file')"
              echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
              echo "disp('Before SelectIf')"
              echo "{suite.Name}"
              printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
              echo "disp('After SelectIf')"
              echo "{suite.Name}"
            } > scripter2.m

            cat scripter2.m
      
      
      - run:
          name: Run the circleci comamnds for name default
          command: |
           # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m" | awk -F'[\\\\/.]' '{print $(NF-1)}'  )

            echo "=== PARAM_SELECT_BY_NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            
            # Capture test selection into PARAM_SELECT_BY_NAME
            PARAM_SELECT_BY_NAME=$(circleci tests glob "tests/**/*.m"  | awk -F'[\\/.]' '{print $(NF-1)}' | circleci tests split --split-by=timings --timings-type=testname | awk '{print "*" $0 "/*"}')
            

            echo "=== PARAM_SELECT_BY_NAME BY NAME ==="
            echo "$PARAM_SELECT_BY_NAME"
            echo

            # Transform into MATLAB cell array format
            selectByName=$(echo "$PARAM_SELECT_BY_NAME" | awk '{
                gsub(/\047/, "\047\047", $0);
                printf "%s\047%s\047", (NR==1 ? "" : ", "), $0;
            }')
            selectByName="{$selectByName}"

            # Generate MATLAB script
            {
              echo 'import matlab.unittest.TestRunner;'
              echo "disp('Int scripter.m file')"
              echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
              echo "disp('Before SelectIf')"
              echo "{suite.Name}"
              printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
              echo "disp('After SelectIf')"
              echo "{suite.Name}"
            } > scripter3.m

            cat scripter3.m
      
      - matlab/install:
          no-output-timeout: 30m
          
      - matlab/run-command:
          # name: Run by timings
          command: ls, scripter1  

      - matlab/run-command:
          # name: Run by filesize
          command: ls, scripter2  
      
      - matlab/run-command:
          # name: Run by name
          command: ls, scripter3 
      # - run:
      #     name: Run UPDATED the circleci comamnds
      #     command: |
      #       # Capture test selection into PARAM_SELECT_BY_NAME
      #       PARAM_SELECT_BY_NAME=$(circleci tests glob 'tests/**/*.m' \
      #         | circleci tests split --split-by=timings)

      #       echo "=== PARAM_SELECT_BY_NAME ==="
      #       echo "$PARAM_SELECT_BY_NAME"
      #       echo

      #       # Transform into MATLAB cell array format
      #       selectByName=$( echo "$PARAM_SELECT_BY_NAME" | awk '{
      #           for(i=1; i<=NF; i++) {
      #               gsub(/\047/, "\047\047", $i);
      #               printf "\047%s\047%s", $i, (i==NF ? "" : ", ");
      #           }
      #       }')
      #       selectByName="{$selectByName}"

      #       # Generate MATLAB script
      #       {
      #         echo 'import matlab.unittest.TestRunner;'
      #         echo "disp('Int scripter.m file')"
      #         echo "suite = testsuite(pwd, 'IncludeSubfolders', true);"
      #         echo "disp('Before selectIf on Name')"
      #         echo "{suite.Name}"
      #         printf "suite = suite.selectIf('Name', %s );\n" "$selectByName"
      #         echo "disp('After selectIf on Name')"
      #         echo "{suite.Name}"
      #       } > scripter1.m

      #       cat scripter1.m

      # - matlab/run-command:
      #     command: ls, scripter1    

      - matlab/run-tests:
          select-by-name: $(circleci tests glob "tests/**/*.m" | awk -F'[\\\\/.]' '{print $(NF-1)}' | sort | uniq | circleci tests split --split-by=timings | awk '{print $0 "/*"}')
          source-folder: src
          test-results-junit: test-results/results.xml
      
      - run:
         command: cat test-results/results.xml
         
      - store_test_results:
          path: test-results/results.xml
      
      #     startup-options: -logfile console.log
      # - run:
      #     name: Verify tests ran as filtered by name
      #     command: |
      #       set -e
      #       grep mytest console.log
      #       grep TaggedTest console.log
      #       grep filtertest console.log
      #       rm console.log
      #     shell: bash
    # Set up for model coverage artifact tests            



workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      # - integration-test-install:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-install-latest-including-prerelease:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-install-release:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]
      #         release: [R2023bU1]

      # - integration-test-install-with-cache:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      # - integration-test-run-command:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      - integration-test-run-tests:
          matrix:
            parameters:
              executor: [linux]
          requires:
            - save-test-metadata              

      # - integration-test-run-build:
      #     matrix:
      #       parameters:
      #         executor: [linux, windows, macos]

      - orb-tools/pack:
          filters: *filters

      - orb-tools/publish:
          orb-name: mathworks/matlab
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires: *integration-tests
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
