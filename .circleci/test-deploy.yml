version: 2.1
orbs:
  matlab: mathworks/matlab@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.1
  win: circleci/windows@5.0

filters: &filters
  tags:
    only: /.*/

integration-tests: &integration-tests
  [
    orb-tools/pack,
    integration-test-install,
    integration-test-install-release,
    integration-test-install-release-macos-intel-on-arm,
    integration-test-run-command,
    integration-test-run-tests
  ]

executors:
  linux: &linux-executor
    machine:
      image: ubuntu-2204:2024.01.1
  macos:
    macos:
      xcode: 15.1.0
    resource_class: macos.x86.medium.gen2
  macos-arm:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
  windows:
    win/default

jobs:
  integration-test-install:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - checkout
      - matlab/install:
          no-output-timeout: 30m
      - run:
          name: Verify the matlab and mex scripts are available
          command: |
            set -e
            os=$(uname)
            if [[ $os = CYGWIN* || $os = MINGW* || $os = MSYS* ]]; then
              mex.bat -h
            else
              mex -h
            fi
          shell: bash
      - matlab/run-command:
          command: version

  integration-test-install-release:
    parameters:
      executor:
        type: executor
      release:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - matlab/install:
          release: <<parameters.release>>
          no-output-timeout: 30m
      - matlab/run-command:
          command: "exp='<<parameters.release>>'; assert(strcmp(version('-release'),exp(2:6)))"

  integration-test-run-command:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - matlab/install:
          no-output-timeout: 30m
      - matlab/run-command:
          command: f = fopen('myscript.m', 'w'); fwrite(f, 'assert(true)'); fclose(f);
      - matlab/run-command:
          command: myscript
      - matlab/run-command:
          command: "eval(\"a = 1+2\"); assert(a == 3); eval('b = 3+4'); assert(b == 7);"
      - matlab/run-command:
          command: 'eval("a = 1+2"); assert(a == 3); eval(''b = 3+4''); assert(b == 7);'
      - matlab/run-command:
          command: a = """hello world"""; b = '"hello world"'; assert(strcmp(a,b), a+b);
      - matlab/run-command:
          command: |
            a = " !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"; b = char([32:126]); assert(strcmp(a, b), a+b);
      - run:
          command: |
            dir=$CIRCLE_WORKING_DIRECTORY
            os=$(uname)
            if [[ $os = CYGWIN* || $os = MINGW* || $os = MSYS* ]]; then
              dir=$(cygpath -w "${dir/#\~/$HOME}")
            fi
            echo 'export WORK_DIR="'$dir'"' >> $BASH_ENV
          shell: bash
      - matlab/run-command:
          command: |
            [~, exp] = system("echo " + getenv('WORK_DIR')); exp = strtrim(exp); act = pwd; assert(strcmp(act, exp), strjoin({act exp}, '\n'));
      - run:
          command: echo 'myvar = 123' > startup.m
          shell: bash
      - matlab/run-command:
          command: assert(myvar==123, 'myvar was not set as expected by startup.m')
      - matlab/run-command:
          command: disp("Hello world!")
          startup-options: -logfile mylog.log
      - matlab/run-command:
          command: assert(isfile("mylog.log"), 'logfile was not created as expected')
      - run:
          command: |
            mkdir subdir
            echo 'onetyone = 11' > subdir/startup.m
          shell: bash
      - matlab/run-command:
          command: assert(onetyone==11, 'onetyone was not set as expected by subdir/startup.m')
          startup-options: -sd subdir

  integration-test-run-tests:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
    # Setup for Integ tests for matlab/run-tests
      - matlab/install:
          products: Simulink Simulink_Test Simulink_Coverage Parallel_Computing_Toolbox
          no-output-timeout: 30m
      - run:
          command: |
            echo 'myvar = 123' > startup.m
            mkdir src
            echo 'function c=add(a,b);c=a+b;' > src/add.m
            mkdir tests
            echo "%% StartupTest" > tests/mytest.m
            echo "evalin('base','assert(myvar==123)')" >> tests/mytest.m
            echo "%% FirstTest" >> tests/mytest.m
            echo "assert(add(1,2)==3)" >> tests/mytest.m
            mkdir tests/filteredTest
            echo "%% simpleTest" >> tests/filteredTest/filtertest.m
            echo "assert(2==2)" >> tests/filteredTest/filtertest.m
            printf "%% FilterByTag\n" >> tests/filteredTest/TaggedTest.m
            printf "classdef (TestTags = {'FILTERED'}) TaggedTest < matlab.unittest.TestCase\n" >> tests/filteredTest/TaggedTest.m
            printf "methods (Test)\n function testTag (testCase)\n assert(2==2);\n end\n end\n end" >> tests/filteredTest/TaggedTest.m
          shell: bash

    # Integ tests for matlab/run-tests
      - matlab/run-tests:
          source-folder: src
          startup-options: -logfile console.log
      - matlab/run-tests:
          test-results-junit: test-results/matlab/results.xml
          code-coverage-cobertura: code-coverage/coverage.xml
          source-folder: src
      - matlab/run-tests:
          test-results-html: test-results/matlab/html
          code-coverage-html: code-coverage/html
          source-folder: src
      - matlab/run-tests:
          test-results-junit: test-results/matlab/filterdtestresult.xml
          select-by-folder: tests/filteredTest
      - matlab/run-tests:
          test-results-junit: test-results/matlab/filterdtagresult.xml
          select-by-tag: FILTERED

      - run:
          name: Verify tests ran with startup options
          command: |
            set -e
            grep mytest console.log
            grep TaggedTest console.log
            grep filtertest console.log
            rm console.log
          shell: bash
      - run:
          name: Verify test results file was created
          command: |
            set -e
            grep -q FirstTest test-results/matlab/results.xml
          shell: bash
      - run:
          name: Verify HTML test results report was created
          command: |
            set -e
            grep -q FirstTest test-results/matlab/html/index.html
          shell: bash
      - run:
          name: Verify code coverage file was created
          command: |
            set -e
            grep -q add code-coverage/coverage.xml
          shell: bash
      - run:
          name: Verify HTML code coverage report was created
          command: |
            set -e
            grep -q CoverageSummary code-coverage/html/index.html
          shell: bash
      - run:
          name: Verify filtered test results file was created
          command: |
            set -e
            grep -q simpleTest test-results/matlab/filterdtestresult.xml
            grep -v FirstTest test-results/matlab/filterdtestresult.xml
          shell: bash
      - run:
          name: Verify filter by tag test results file was created
          command: |
            set -e
            grep -q TaggedTest test-results/matlab/filterdtagresult.xml
            grep -v FirstTest test-results/matlab/filterdtagresult.xml
            grep -v simpleTest test-results/matlab/filterdtagresult.xml
          shell: bash

      - run:
          name: Set up diary for logging
          command: |
            echo 'diary console.log' >> startup.m
          shell: bash
      - matlab/run-tests:
          strict: true
          source-folder: src
      - run:
          name: Verify tests ran with strict checks
          command: |
            set -e
            grep -q "runner.addPlugin(FailOnWarningsPlugin())" console.log
            rm console.log
          shell: bash
      - matlab/run-tests:
          use-parallel: true
          source-folder: src
      - run:
          name: Verify tests ran in parallel
          command: |
            set -e
            grep -q "parallel pool" console.log
            rm console.log
          shell: bash
      - matlab/run-tests:
          output-detail: Detailed
          source-folder: src
      - run:
          name: Verify tests ran with detailed display level for event details
          command: |
            set -e
            grep -q "TestRunner.withTextOutput('OutputDetail', 3)" console.log
            rm console.log
          shell: bash
      - matlab/run-tests:
          logging-level: Detailed
          source-folder: src
      - run:
          name: Verify tests ran with detailed verbosity level for logged diagnostics
          command: |
            set -e
            grep -q "TestRunner.withTextOutput('LoggingLevel', 3)" console.log
            rm console.log
          shell: bash

    # Set up for model coverage artifact tests
      - when:
          condition:
            equal: [*linux-executor, <<parameters.executor>>]
          steps:
            - run:
                command: |
                  mkdir simtests
                  cat \<<'_EOF' >> "simtests/createModelAndTest.m"
                  model = 'simple_model';
                  evalin('base','bdclose all');
                  if exist('simple_model.slx', 'file') == 0
                      new_system(model);
                      load_system(model);
                      add_block('built-in/Constant', [model, '/Constant']);
                      save_system(model);
                      close_system(model);
                      sltest.testmanager.clear;
                      sltest.testmanager.clearResults;
                      tf = sltest.testmanager.TestFile('test.mldatx');
                      cs = tf.getCoverageSettings;
                      cs.RecordCoverage = true;
                      cs.MdlRefCoverage = true;
                      cs.MetricSettings = 'd';
                      ts = tf.getTestSuites;
                      tc = ts.getTestCases;
                      tc.setProperty('model', model);
                      tf.saveToFile;
                      tf.close;
                      sltest.testmanager.close;
                  end
                  disp('Created Model and Simulink Test file to simulate the model.');
                  _EOF
                shell: bash
            - matlab/run-command:
                command: cd simtests;createModelAndTest;
            - matlab/run-tests:
                select-by-folder: simtests
                model-coverage-cobertura: model-coverage/coverage.xml
                model-coverage-html: model-coverage/html
                test-results-pdf: test-results/matlab/pdfresults.pdf
                test-results-simulink-test: test-results/matlab/simulinkTest.mldatx
            - run:
                name: Verify pdf test report file generation
                command: |
                  set -e
                  test -f test-results/matlab/pdfresults.pdf
                shell: bash
            - run:
                name: Verify Simulink Test result file generation
                command: |
                  set -e
                  test -f test-results/matlab/simulinkTest.mldatx
                shell: bash
            - run:
                name: Verify model coverage file was created
                command: |
                  set -e
                  grep -q simple_model model-coverage/coverage.xml
                shell: bash
            - run:
                name: Verify HTML model coverage report was created
                command: |
                  set -e
                  grep -r "simple_model Coverage Report" --include="*.html" model-coverage/html
                shell: bash

  integration-test-run-build:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      # Setup for Integ tests for matlab/run-build
      - matlab/install:
          no-output-timeout: 30m
      - run:
          command: |
            cat \<<'_EOF' >> "buildfile.m"
              function plan = buildfile
              plan = buildplan(localfunctions);
              plan("test").Dependencies = "build";
              plan("deploy").Dependencies = "test";

              plan.DefaultTasks = "test";

              function buildTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'building\n'); fclose(f);

              function testTask(~,tests,options)
              arguments
                ~
                tests string = "tests"
                options.OutputDetail (1,1) string = "terse"
              end
              f = fopen('buildlog.txt', 'a+');
              fprintf(f, 'testing\n');
              fprintf(f, '%s\n', tests);
              fprintf(f, '%s\n', options.OutputDetail);
              fclose(f);

              function deployTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'deploying\n'); fclose(f);

              function checkTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'checking\n'); fclose(f);
            _EOF
          shell: bash
      # run build with one specified task
      - matlab/run-build:
          tasks: deploy
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with multiple specified tasks
      - matlab/run-build:
          tasks: deploy check
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with task args
      - matlab/run-build:
          tasks: test("myTests", OutputDetail="concise")
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "myTests" buildlog.txt
            grep "concise" buildlog.txt
            ! grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with default tasks
      - matlab/run-build:
          startup-options: -logfile console.log
      - run:
          name: Verify that correct tasks appear in buildlog.txt and console.log
          command: |
            set -e
            grep "building" buildlog.txt
            grep "build" console.log
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "test" console.log
            ! grep "deploying" buildlog.txt
            ! grep "deploy" console.log
            ! grep "checking" buildlog.txt
            ! grep "check" console.log
            rm buildlog.txt
            rm console.log
          shell: bash
      # run build with task skipping
      - matlab/run-build:
          tasks: deploy
          build-options: -skip test
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            ! grep "testing" buildlog.txt
            ! grep "tests" buildlog.txt
            ! grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash

workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - integration-test-install:
          matrix:
            parameters:
              executor: [linux, windows, macos, macos-arm]

      - integration-test-install-release:
          matrix:
            parameters:
              executor: [linux, windows, macos, macos-arm]
              release: [R2023bU1]

      - integration-test-install-release:
          name: integration-test-install-release-macos-intel-on-arm
          executor: macos-arm
          release: R2023aU1

      - integration-test-run-command:
          matrix:
            parameters:
              executor: [linux, windows, macos, macos-arm]

      - integration-test-run-tests:
          matrix:
            parameters:
              executor: [linux, windows, macos, macos-arm]

      - integration-test-run-build:
          matrix:
            parameters:
              executor: [linux, windows, macos, macos-arm]

      - orb-tools/pack:
          filters: *filters

      - orb-tools/publish:
          orb-name: mathworks/matlab
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires: *integration-tests
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
