version: 2.1
orbs:
  matlab: mathworks/matlab@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.1
  win: circleci/windows@5.0

filters: &filters
  tags:
    only: /.*/

integration-tests: &integration-tests
  [
    orb-tools/pack,
    #integration-test-install,
    # integration-test-install-release,
    #integration-test-install-release-macos-intel-on-arm,
    integration-test-run-command,
    integration-test-run-tests
  ]

executors:
  linux: &linux-executor
    machine:
      image: ubuntu-2204:2024.01.1
  macos:
    macos:
      xcode: 15.1.0
    resource_class: macos.x86.medium.gen2
  macos-arm:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
  windows:
    win/default

jobs:
  integration-test-install:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - checkout
      - matlab/install:
          no-output-timeout: 30m
      - run:
          name: Verify the matlab and mex scripts are available
          command: |
            set -e
            os=$(uname)
            if [[ $os = CYGWIN* || $os = MINGW* || $os = MSYS* ]]; then
              mex.bat -h
            else
              mex -h
            fi
          shell: bash
      - matlab/run-command:
          command: version

  integration-test-install-release:
    parameters:
      executor:
        type: executor
      release:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - matlab/install:
          release: <<parameters.release>>
          no-output-timeout: 30m
      - matlab/run-command:
          command: "exp='<<parameters.release>>'; assert(strcmp(version('-release'),exp(2:6)))"

  integration-test-run-command:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - matlab/install:
          no-output-timeout: 30m
      - matlab/run-command:
          command: f = fopen('myscript.m', 'w'); fwrite(f, 'assert(true)'); fclose(f);
      - matlab/run-command:
          command: myscript
      - matlab/run-command:
          command: "eval(\"a = 1+2\"); assert(a == 3); eval('b = 3+4'); assert(b == 7);"
      - matlab/run-command:
          command: 'eval("a = 1+2"); assert(a == 3); eval(''b = 3+4''); assert(b == 7);'
      - matlab/run-command:
          command: a = """hello world"""; b = '"hello world"'; assert(strcmp(a,b), a+b);
      - matlab/run-command:
          command: |
            a = " !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"; b = char([32:126]); assert(strcmp(a, b), a+b);
      - run:
          command: |
            dir=$CIRCLE_WORKING_DIRECTORY
            os=$(uname)
            if [[ $os = CYGWIN* || $os = MINGW* || $os = MSYS* ]]; then
              dir=$(cygpath -w "${dir/#\~/$HOME}")
            fi
            echo 'export WORK_DIR="'$dir'"' >> $BASH_ENV
          shell: bash
      - matlab/run-command:
          command: |
            [~, exp] = system("echo " + getenv('WORK_DIR')); exp = strtrim(exp); act = pwd; assert(strcmp(act, exp), strjoin({act exp}, '\n'));
      - run:
          command: echo 'myvar = 123' > startup.m
          shell: bash
      - matlab/run-command:
          command: assert(myvar==123, 'myvar was not set as expected by startup.m')
      - matlab/run-command:
          command: disp("Hello world!")
          startup-options: -logfile mylog.log
      - matlab/run-command:
          command: assert(isfile("mylog.log"), 'logfile was not created as expected')
      - run:
          command: |
            mkdir subdir
            echo 'onetyone = 11' > subdir/startup.m
          shell: bash
      - matlab/run-command:
          command: assert(onetyone==11, 'onetyone was not set as expected by subdir/startup.m')
          startup-options: -sd subdir

  integration-test-run-tests:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    parallelism: 2    
    steps:
      - checkout
    # Setup for Integ tests for matlab/run-tests
      - matlab/install:
          products: Simulink Simulink_Test Simulink_Coverage Parallel_Computing_Toolbox
          no-output-timeout: 30m
          
      - matlab/run-tests:
          select-by-folder: 'tests'
          select-by-name: select-by-name: $(circleci tests glob 'tests/**/*.m' | circleci tests split --split-by=filesize | awk -F'[/.]' '{print $(NF-1) "/*"}')
          test-results-junit: results
      
      - store_test_results:
           path: results

      - store_artifacts:
          path: results
          destination: test-results/results 
       
       

  integration-test-run-build:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      # Setup for Integ tests for matlab/run-build
      - matlab/install:
          no-output-timeout: 30m
      - run:
          command: |
            cat \<<'_EOF' >> "buildfile.m"
              function plan = buildfile
              plan = buildplan(localfunctions);
              plan("test").Dependencies = "build";
              plan("deploy").Dependencies = "test";

              plan.DefaultTasks = "test";

              function buildTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'building\n'); fclose(f);

              function testTask(~,tests,options)
              arguments
                ~
                tests string = "tests"
                options.OutputDetail (1,1) string = "terse"
              end
              f = fopen('buildlog.txt', 'a+');
              fprintf(f, 'testing\n');
              fprintf(f, '%s\n', tests);
              fprintf(f, '%s\n', options.OutputDetail);
              fclose(f);

              function deployTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'deploying\n'); fclose(f);

              function checkTask(~)
              f = fopen('buildlog.txt', 'a+'); fprintf(f, 'checking\n'); fclose(f);
            _EOF
          shell: bash
      # run build with one specified task
      - matlab/run-build:
          tasks: deploy
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with multiple specified tasks
      - matlab/run-build:
          tasks: deploy check
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with task args
      - matlab/run-build:
          tasks: test("myTests", OutputDetail="concise")
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            grep "testing" buildlog.txt
            grep "myTests" buildlog.txt
            grep "concise" buildlog.txt
            ! grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash
      # run build with default tasks
      - matlab/run-build:
          startup-options: -logfile console.log
      - run:
          name: Verify that correct tasks appear in buildlog.txt and console.log
          command: |
            set -e
            grep "building" buildlog.txt
            grep "build" console.log
            grep "testing" buildlog.txt
            grep "tests" buildlog.txt
            grep "terse" buildlog.txt
            grep "test" console.log
            ! grep "deploying" buildlog.txt
            ! grep "deploy" console.log
            ! grep "checking" buildlog.txt
            ! grep "check" console.log
            rm buildlog.txt
            rm console.log
          shell: bash
      # run build with task skipping
      - matlab/run-build:
          tasks: deploy
          build-options: -skip test
      - run:
          name: Verify that correct tasks appear in buildlog.txt
          command: |
            set -e
            grep "building" buildlog.txt
            ! grep "testing" buildlog.txt
            ! grep "tests" buildlog.txt
            ! grep "terse" buildlog.txt
            grep "deploying" buildlog.txt
            ! grep "checking" buildlog.txt
            rm buildlog.txt
          shell: bash

workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - integration-test-install:
          matrix:
            parameters:
              executor: [linux]

      # - integration-test-install-release:
      #     matrix:
      #       parameters:
      #         executor: [linux]
      #         release: [R2023bU1]

      - integration-test-install-release:
          name: integration-test-install-release-macos-intel-on-arm
          executor: macos-arm
          release: R2023aU1

      - integration-test-run-command:
          matrix:
            parameters:
              executor: [linux]

      - integration-test-run-tests:
          matrix:
            parameters:
              executor: [linux]

      - integration-test-run-build:
          matrix:
            parameters:
              executor: [linux]

      - orb-tools/pack:
          filters: *filters

      - orb-tools/publish:
          orb-name: mathworks/matlab
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires: *integration-tests
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/